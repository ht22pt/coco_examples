// Generated by CoffeeScript 1.6.1
var AABB, ActionLog, ActiveTimer, ComplexPolygon, ControllerState, ControllerUI, INF, NINF, POLYGON_COLORS, Perspective, Polygon, PolygonUI, StageUI, UEClosePolygon, UECreatePolygon, UEDeletePolygon, UEDragVertex, UEPushPoint, UERemoveOpenPoly, UESelectPolygon, UEToggleMode, UEUnselectPolygon, UndoRedo, UndoableEvent, btn_submit, ccw, clone_pt, compute_dimensions, dist_pt, fix_aspect, get_cors_url, hsv_to_rgb, load_cors_image, mean_pt, mod, pt_in_tri, rgb_to_hsv, seg_pt_dist2, segments_intersect, select_image_url, set_btn_enabled, stop_event, sub_pt, tri_area,
  _this = this,
  __hasProp = {}.hasOwnProperty,
//  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
//  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } if (parent != null){ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }else{child.prototype = new ctor();child.__super__=child.prototype; return child;}},
  __extends = function(child, parent) { 
      for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } 
      function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

UndoableEvent = (function() {

  function UndoableEvent() {}

  UndoableEvent.prototype.undo = function(ui) {
    throw {
      name: "TODO",
      message: "Unimplemetned Code"
    };
  };

  UndoableEvent.prototype.run = function(ui) {
    throw {
      name: "TODO",
      message: "Unimplemetned Code"
    };
  };

  UndoableEvent.prototype.redo = function(ui) {
    return this.run(ui);
  };

  UndoableEvent.prototype.entry = function() {
    throw {
      name: "TODO",
      message: "Unimplemetned Code"
    };
  };

  return UndoableEvent;

})();

ControllerState = (function() {

  function ControllerState(ui, args) {
    var _this = this;
    this.ui = ui;
    this.unselect_poly = function(reset_zoomed_adjust) {
      if (reset_zoomed_adjust == null) {
        reset_zoomed_adjust = true;
      }
      return ControllerState.prototype.unselect_poly.apply(_this, arguments);
    };
    this.can_close = function() {
      return ControllerState.prototype.can_close.apply(_this, arguments);
    };
    this.translate_delta = function(x, y) {
      return ControllerState.prototype.translate_delta.apply(_this, arguments);
    };
    this.get_zoom_factor = function() {
      return ControllerState.prototype.get_zoom_factor.apply(_this, arguments);
    };
    this.update_zoom = function(redraw) {
      if (redraw == null) {
        redraw = true;
      }
      return ControllerState.prototype.update_zoom.apply(_this, arguments);
    };
    this.zoom_reset = function() {
      return ControllerState.prototype.zoom_reset.apply(_this, arguments);
    };
    this.zoom_delta = function(delta) {
      return ControllerState.prototype.zoom_delta.apply(_this, arguments);
    };
    this.mouse_pos = function() {
      return ControllerState.prototype.mouse_pos.apply(_this, arguments);
    };
    this.draw = function() {
      return ControllerState.prototype.draw.apply(_this, arguments);
    };
    this.get_submit_data = function() {
      return ControllerState.prototype.get_submit_data.apply(_this, arguments);
    };
    this.loading = true;
    if (args.photo_id != null) {
      this.photo_id = args.photo_id;
    }
    this.undoredo = new UndoRedo(ui, args);
    this.log = new ActionLog();
    this.log.action($.extend(true, {
      name: 'init'
    }, args));
    this.draw_mode = true;
    this.panning = false;
    this.mousedown = false;
    this.mousepos = null;
    this.zoomed_adjust = false;
    this.modal_count = 0;
    this.btn_draw = args.btn_draw != null ? args.btn_draw : '#btn-draw';
    this.btn_edit = args.btn_edit != null ? args.btn_edit : '#btn-edit';
    this.btn_close = args.btn_close != null ? args.btn_close : '#btn-close';
    this.btn_submit = args.btn_submit != null ? args.btn_submit : '#btn-submit';
    this.btn_delete = args.btn_delete != null ? args.btn_delete : '#btn-delete';
    this.btn_zoom_reset = args.btn_zoom_reset != null ? args.btn_zoom_reset : '#btn-zoom-reset';
    this.stage_ui = new StageUI(ui, args);
    this.closed_polys = [];
    this.open_poly = null;
    this.sel_poly = null;
    this.saved_point = null;
  }

  ControllerState.prototype.get_submit_data = function() {
    var p, points_scaled, poly, results, results_list, time_active_ms, time_ms, _i, _j, _len, _len1, _ref, _ref1;
    results_list = [];
    _ref = this.closed_polys;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      poly = _ref[_i];
      points_scaled = [];
      _ref1 = poly.poly.points;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        p = _ref1[_j];
        points_scaled.push(Math.max(0, Math.min(1, p.x / this.stage_ui.size.width)));
        points_scaled.push(Math.max(0, Math.min(1, p.y / this.stage_ui.size.height)));
      }
      results_list.push(points_scaled);
    }
    results = {};
    time_ms = {};
    time_active_ms = {};
    results[this.photo_id] = results_list;
    time_ms[this.photo_id] = (function() {
      var _k, _len2, _ref2, _results;
      _ref2 = this.closed_polys;
      _results = [];
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        p = _ref2[_k];
        _results.push(p.time_ms);
      }
      return _results;
    }).call(this);
    time_active_ms[this.photo_id] = (function() {
      var _k, _len2, _ref2, _results;
      _ref2 = this.closed_polys;
      _results = [];
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        p = _ref2[_k];
        _results.push(p.time_active_ms);
      }
      return _results;
    }).call(this);
    return {
      version: '1.0',
      results: JSON.stringify(results),
      time_ms: JSON.stringify(time_ms),
      time_active_ms: JSON.stringify(time_active_ms),
      action_log: this.log.get_submit_data()
    };
  };

  ControllerState.prototype.draw = function() {
    return this.stage_ui.draw();
  };

  ControllerState.prototype.mouse_pos = function() {
    return this.stage_ui.mouse_pos();
  };

  ControllerState.prototype.zoom_delta = function(delta) {
    this.zoomed_adjust = false;
    this.stage_ui.zoom_delta(delta);
    this.update_buttons();
    return this.update_zoom();
  };

  ControllerState.prototype.zoom_reset = function() {
    this.zoomed_adjust = false;
    this.stage_ui.zoom_reset();
    this.update_buttons();
    return this.update_zoom();
  };

  ControllerState.prototype.update_zoom = function(redraw) {
    var inv_f, poly, _i, _len, _ref, _ref1, _ref2;
    if (redraw == null) {
      redraw = true;
    }
    inv_f = 1.0 / this.stage_ui.get_zoom_factor();
    _ref = this.closed_polys;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      poly = _ref[_i];
      poly.update_zoom(this.ui, inv_f, false);
    }
    if ((_ref1 = this.open_poly) != null) {
      _ref1.update_zoom(this.ui, inv_f, false);
    }
    if ((_ref2 = this.sel_poly) != null) {
      _ref2.add_anchors(this.ui);
    }
    if (redraw) {
      return this.draw();
    }
  };

  ControllerState.prototype.get_zoom_factor = function() {
    return this.stage_ui.get_zoom_factor();
  };

  ControllerState.prototype.translate_delta = function(x, y) {
    return this.stage_ui.translate_delta(x, y);
  };

  ControllerState.prototype.push_point = function(p) {
    var _ref;
    if ((_ref = this.open_poly) != null) {
      _ref.poly.push_point(p);
    }
    return this.open_poly;
  };

  ControllerState.prototype.pop_point = function() {
    var _ref;
    if ((_ref = this.open_poly) != null) {
      _ref.poly.pop_point();
    }
    return this.open_poly;
  };

  ControllerState.prototype.get_pt = function(id, i) {
    var _ref;
    return (_ref = this.get_poly(id)) != null ? _ref.poly.get_pt(i) : void 0;
  };

  ControllerState.prototype.create_poly = function(points) {
    var poly;
    console.log('create_poly:');
    console.log(points);
    if (this.open_poly != null) {
      this.open_poly.remove_all();
    }
    poly = new Polygon(points);
    this.open_poly = new PolygonUI(this.closed_polys.length, poly, this.stage_ui);
    this.open_poly.timer = new ActiveTimer();
    this.open_poly.timer.start();
    this.update_buttons();
    return this.open_poly;
  };

  ControllerState.prototype.insert_closed_poly = function(points, id, time_ms, time_active_ms) {
    var closed_poly, poly;
    poly = new Polygon(points);
    poly.close();
    closed_poly = new PolygonUI(id, poly, this.stage_ui);
    closed_poly.time_ms = time_ms;
    closed_poly.time_active_ms = time_active_ms;
    this.closed_polys.splice(id, 0, closed_poly);
    this.update_buttons();
    return closed_poly;
  };

  ControllerState.prototype.get_poly = function(id) {
    var p, _i, _len, _ref;
    _ref = this.closed_polys;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      if (p.id === id) {
        return p;
      }
    }
    return null;
  };

  ControllerState.prototype.num_polys = function() {
    return this.closed_polys.length;
  };

  ControllerState.prototype.remove_open_poly = function() {
    var _ref;
    if ((_ref = this.open_poly) != null) {
      _ref.remove_all();
    }
    return this.open_poly = null;
  };

  ControllerState.prototype.close_poly = function() {
    var poly;
    if (this.open_poly != null) {
      this.open_poly.time_ms = this.open_poly.timer.time_ms();
      this.open_poly.time_active_ms = this.open_poly.timer.time_active_ms();
      poly = this.open_poly;
      this.open_poly.poly.close();
      this.closed_polys.push(this.open_poly);
      this.open_poly = null;
      this.update_buttons();
      return poly;
    } else {
      return null;
    }
  };

  ControllerState.prototype.can_close = function() {
    if (!this.loading && (this.open_poly != null)) {
      if ((window.min_vertices != null) && this.open_poly.poly.num_points() < window.min_vertices) {
        return false;
      }
      return this.open_poly.poly.can_close();
    } else {
      return false;
    }
  };

  ControllerState.prototype.unclose_poly = function() {
    if (this.draw_mode && (this.open_poly == null) && this.num_polys() > 0) {
      this.open_poly = this.closed_polys.pop();
      this.open_poly.poly.unclose();
      this.update_buttons();
      return this.open_poly;
    } else {
      return null;
    }
  };

  ControllerState.prototype.can_delete_sel = function() {
    return !this.loading && !this.draw_mode && (this.sel_poly != null) && this.num_polys() > 0;
  };

  ControllerState.prototype.delete_sel_poly = function() {
    var i, p, _i, _len, _ref, _ref1;
    if (this.can_delete_sel()) {
      _ref = this.closed_polys;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        p = _ref[i];
        if (p.id === this.sel_poly.id) {
          this.closed_polys.splice(i, 1);
          if ((_ref1 = this.sel_poly) != null) {
            _ref1.remove_all();
          }
          this.sel_poly = null;
          break;
        }
      }
      if (this.zoomed_adjust) {
        this.zoom_reset();
      }
      this.update_buttons();
      return null;
    } else {
      return null;
    }
  };

  ControllerState.prototype.select_poly = function(ui, id) {
    if (this.draw_mode) {
      return;
    }
    if (this.sel_poly != null) {
      if (this.sel_poly.id === id) {
        return;
      }
      this.unselect_poly(false);
    }
    this.sel_poly = this.get_poly(id);
    this.sel_poly.add_anchors(ui);
    this.stage_ui.zoom_box(this.sel_poly.poly.get_aabb());
    this.zoomed_adjust = true;
    this.update_buttons();
    this.update_zoom(false);
    this.draw();
    return this.sel_poly;
  };

  ControllerState.prototype.unselect_poly = function(reset_zoomed_adjust) {
    var _ref;
    if (reset_zoomed_adjust == null) {
      reset_zoomed_adjust = true;
    }
    if ((_ref = this.sel_poly) != null) {
      _ref.remove_anchors();
    }
    this.sel_poly = null;
    if (reset_zoomed_adjust && this.zoomed_adjust) {
      this.zoom_reset();
    }
    this.update_buttons();
    return null;
  };

  ControllerState.prototype.toggle_mode = function() {
    this.draw_mode = !this.draw_mode;
    if (this.draw_mode) {
      if (this.sel_poly != null) {
        this.unselect_poly();
      }
    } else {
      if (this.open_poly != null) {
        this.remove_open_poly();
      }
    }
    return this.update_buttons();
  };

  ControllerState.prototype.disable_buttons = function() {
    set_btn_enabled(this.btn_draw, false);
    set_btn_enabled(this.btn_edit, false);
    set_btn_enabled(this.btn_close, false);
    return set_btn_enabled(this.btn_submit, false);
  };

  ControllerState.prototype.update_cursor = function() {
    if (this.panning) {
      if ($.browser.webkit) {
        if (this.mousedown) {
          return $('canvas').css('cursor', '-webkit-grabing');
        } else {
          return $('canvas').css('cursor', '-webkit-grab');
        }
      } else {
        if (this.mousedown) {
          return $('canvas').css('cursor', '-moz-grabing');
        } else {
          return $('canvas').css('cursor', '-moz-grab');
        }
      }
    } else if (this.draw_mode) {
      return $('canvas').css('cursor', 'crosshair');
    } else {
      return $('canvas').css('cursor', 'default');
    }
  };

  ControllerState.prototype.update_buttons = function() {
    var enable_submit;
    this.update_cursor();
    enable_submit = (window.min_shapes == null) || this.num_polys() >= window.min_shapes;
    set_btn_enabled(this.btn_submit, enable_submit);
    set_btn_enabled(this.btn_draw, !this.loading);
    set_btn_enabled(this.btn_edit, !this.loading);
    set_btn_enabled(this.btn_delete, this.can_delete_sel());
//    set_btn_enabled(this.btn_zoom_reset, !this.loading && this.stage_ui.zoom_exp > 0);
    set_btn_enabled(this.btn_zoom_reset, !this.loading);
    if (this.draw_mode) {
      $(this.btn_draw).button('toggle');
      return set_btn_enabled(this.btn_close, this.can_close());
    } else {
      $(this.btn_edit).button('toggle');
      return set_btn_enabled(this.btn_close, false);
    }
  };

  return ControllerState;

})();

PolygonUI = (function() {

  function PolygonUI(id, poly, stage) {
    this.id = id;
    this.poly = poly;
    this.stage = stage;
    this.line = null;
    this.fill = null;
    this.text = null;
    this.hover_line = null;
    this.hover_fill = null;
    this.anchors = null;
    this.stroke_scale = 1.0 / this.stage.get_zoom_factor();
  }

  PolygonUI.prototype.update_zoom = function(ui, inv_zoom_factor, redraw) {
    if (redraw == null) {
      redraw = true;
    }
    this.stroke_scale = inv_zoom_factor;
    return this.update(ui, redraw);
  };

  PolygonUI.prototype.update = function(ui, redraw) {
    var p;
    if (redraw == null) {
      redraw = true;
    }
    if (this.poly.open) {
      this.remove_fill();
      this.remove_text();
      this.add_line();
      p = this.stage.mouse_pos();
      if ((p != null) && !this.poly.empty()) {
        this.add_hover(p);
      } else {
        this.remove_hover();
      }
    } else {
      this.remove_hover();
      this.remove_line();
      this.add_fill(ui);
      this.add_text();
    }
    if (redraw) {
      return this.stage.draw();
    }
  };

  PolygonUI.prototype.remove_line = function() {
    this.stage.remove(this.line);
    return this.line = null;
  };

  PolygonUI.prototype.remove_fill = function() {
    this.stage.remove(this.fill);
    return this.fill = null;
  };

  PolygonUI.prototype.remove_text = function() {
    this.stage.remove(this.text);
    return this.text = null;
  };

  PolygonUI.prototype.remove_hover = function() {
    this.stage.remove(this.hover_fill);
    this.hover_fill = null;
    this.stage.remove(this.hover_line);
    return this.hover_line = null;
  };

  PolygonUI.prototype.remove_anchors = function() {
    var a, _i, _j, _len, _len1, _ref, _ref1;
    if (this.anchors != null) {
      if (this.anchors.length < 8) {
        _ref = this.anchors;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          a = _ref[_i];
          this.stage.remove(a, 0.4);
        }
      } else {
        _ref1 = this.anchors;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          a = _ref1[_j];
          this.stage.remove(a, 0);
        }
      }
      this.anchors = null;
      return this.stage.draw();
    }
  };

  PolygonUI.prototype.remove_all = function() {
    this.remove_line();
    this.remove_fill();
    this.remove_text();
    this.remove_hover();
    return this.remove_anchors();
  };

  PolygonUI.prototype.add_fill = function(ui) {
    var _this = this;
    if (this.fill != null) {
      this.fill.setPoints(this.poly.points);
      return this.fill.setStrokeWidth(2 * this.stroke_scale);
    } else {
      this.fill = new Kinetic.Polygon({
        points: this.poly.points,
        fill: POLYGON_COLORS[this.id % POLYGON_COLORS.length],
        stroke: '#007',
        strokeWidth: 2 * this.stroke_scale,
        lineJoin: 'round'
      });
      this.fill.on('click', function() {
        if (!ui.s.panning) {
          return ui.select_poly(_this.id);
        }
      });
//      return this.stage.add(this.fill, 0.4);
//    modified by TY      
      return this.stage.add(this.fill, 0.8);
    }
  };

  PolygonUI.prototype.add_text = function() {
    var cen, label, pos;
    cen = this.poly.labelpos();
    label = String(this.id + 1);
    pos = {
      x: cen.x - 5 * label.length * this.stroke_scale,
      y: cen.y - 5 * this.stroke_scale
    };
    if (this.text != null) {
      this.text.setPosition(pos);
      this.text.setText(label);
      return this.text.setFontSize(10 * this.stroke_scale);
    } else {
      this.text = new Kinetic.Text({
        text: label,
        fill: '#000',
        x: pos.x,
        y: pos.y,
        align: 'left',
        fontSize: 10 * this.stroke_scale,
        fontFamily: 'Verdana',
        fontStyle: 'bold'
      });
      return this.stage.add(this.text, 1.0);
    }
  };

  PolygonUI.prototype.add_line = function() {
    if (this.line != null) {
      this.line.setPoints(this.poly.points);
      return this.line.setStrokeWidth(3 * this.stroke_scale);
    } else {
      this.line = new Kinetic.Line({
        points: this.poly.points,
        opacity: 0,
        stroke: "#00F",
        strokeWidth: 3 * this.stroke_scale,
        lineJoin: "round"
      });
      return this.stage.add(this.line, 0.5);
    }
  };

  PolygonUI.prototype.add_hover = function(p) {
    this.add_hover_fill(p);
    return this.add_hover_line(p);
  };

  PolygonUI.prototype.add_hover_fill = function(p) {
    var hover_points;
    hover_points = this.poly.points.concat([clone_pt(p)]);
    if (this.hover_fill != null) {
      return this.hover_fill.setPoints(hover_points);
    } else {
      this.hover_fill = new Kinetic.Polygon({
        points: hover_points,
        opacity: 0,
        fill: "#00F"
      });
      return this.stage.add(this.hover_fill, 0.15);
    }
  };

  PolygonUI.prototype.add_hover_line = function(p) {
    var hover_points;
    hover_points = [clone_pt(p), this.poly.points[this.poly.num_points() - 1]];
    if (this.hover_line != null) {
      this.hover_line.setPoints(hover_points);
      this.hover_line.setStrokeWidth(3 * this.stroke_scale);
    } else {
      this.hover_line = new Kinetic.Line({
        points: hover_points,
        opacity: 0,
        stroke: "#00F",
        strokeWidth: 3 * this.stroke_scale,
        lineCap: "round"
      });
      this.stage.add(this.hover_line, 0.5);
    }
    if (this.poly.can_push_point(p)) {
      this.hover_line.setStroke("#00F");
      return this.hover_line.setStrokeWidth(3 * this.stroke_scale);
    } else {
      this.hover_line.setStroke("#F00");
      return this.hover_line.setStrokeWidth(10 * this.stroke_scale);
    }
  };

  PolygonUI.prototype.add_anchors = function(ui) {
    var i, p, v, _i, _j, _len, _len1, _ref, _ref1, _results,
      _this = this;
    if (ui.s.draw_mode) {
      return;
    }
    if (this.anchors != null) {
      if (this.anchors.length === this.poly.points.length) {
        _ref = this.poly.points;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          p = _ref[i];
          this.anchors[i].setPosition(p.x, p.y);
          this.anchors[i].setStrokeWidth(2 * this.stroke_scale);
          this.anchors[i].setRadius(10 * this.stroke_scale);
        }
        return;
      }
      this.remove_anchors();
    }
    this.anchors = [];
    _ref1 = this.poly.points;
    _results = [];
    for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
      p = _ref1[i];
      v = new Kinetic.Circle({
        x: p.x,
        y: p.y,
        radius: 10 * this.stroke_scale,
        strokeWidth: 2 * this.stroke_scale,
        stroke: "#666",
        fill: "#ddd",
        opacity: 0,
        draggable: true
      });
      v.on('mouseover', (function(v) {
        return function() {
          if (v.removing !== true) {
            $('canvas').css('cursor', 'pointer');
            v.setStrokeWidth(4 * _this.stroke_scale);
            return _this.stage.draw();
          }
        };
      })(v));
      v.on('mouseout', (function(v) {
        return function() {
          if (v.removing !== true) {
            $('canvas').css('cursor', 'default');
            v.setStrokeWidth(2 * _this.stroke_scale);
            return _this.stage.draw();
          }
        };
      })(v));
      v.on('mousedown', (function(i) {
        return function() {
          if (v.removing !== true) {
            return ui.start_drag_point(i);
          }
        };
      })(i));
      v.on('dragmove', (function(i) {
        return function() {
          ui.progress_drag_point(i, _this.anchors[i].getPosition());
          if (_this.fill) {
            if (ui.drag_valid(i)) {
              _this.fill.setStrokeWidth(2 * _this.stroke_scale);
              return _this.fill.setStroke("#007");
            } else {
              _this.fill.setStrokeWidth(10 * _this.stroke_scale);
              return _this.fill.setStroke("#F00");
            }
          }
        };
      })(i));
      v.on('dragend', (function(i) {
        return function() {
          var ps;
          if (ui.drag_valid(i)) {
            ui.finish_drag_point(i, _this.anchors[i].getPosition());
          } else {
            ps = ui.revert_drag_point(i);
            if (ps != null) {
              _this.anchors[i].setPosition(ps.x, ps.y);
            }
          }
          _this.fill.setStrokeWidth(2 * _this.stroke_scale);
          _this.fill.setStroke("#007");
          return _this.update(ui);
        };
      })(i));
      if (this.poly.points.length < 8) {
        this.stage.add(v, 0.5, 0.4);
      } else {
        this.stage.add(v, 0.5, 0);
      }
      _results.push(this.anchors.push(v));
    }
    return _results;
  };

  return PolygonUI;

})();

ControllerUI = (function() {

  function ControllerUI(args) {
    var _this = this;
    this.on_photo_loaded = function() {
      return ControllerUI.prototype.on_photo_loaded.apply(_this, arguments);
    };
    this.toggle_mode = function() {
      return ControllerUI.prototype.toggle_mode.apply(_this, arguments);
    };
    this.drag_valid = function(i) {
      return ControllerUI.prototype.drag_valid.apply(_this, arguments);
    };
    this.finish_drag_point = function(i, p) {
      return ControllerUI.prototype.finish_drag_point.apply(_this, arguments);
    };
    this.progress_drag_point = function(i, p) {
      return ControllerUI.prototype.progress_drag_point.apply(_this, arguments);
    };
    this.revert_drag_point = function(i) {
      return ControllerUI.prototype.revert_drag_point.apply(_this, arguments);
    };
    this.start_drag_point = function(i) {
      return ControllerUI.prototype.start_drag_point.apply(_this, arguments);
    };
    this.delete_sel_poly = function() {
      return ControllerUI.prototype.delete_sel_poly.apply(_this, arguments);
    };
    this.remove_open_poly = function(id) {
      return ControllerUI.prototype.remove_open_poly.apply(_this, arguments);
    };
    this.unselect_poly = function(id) {
      return ControllerUI.prototype.unselect_poly.apply(_this, arguments);
    };
    this.select_poly = function(id) {
      return ControllerUI.prototype.select_poly.apply(_this, arguments);
    };
    this.close_poly = function() {
      return ControllerUI.prototype.close_poly.apply(_this, arguments);
    };
    this.update = function() {
      return ControllerUI.prototype.update.apply(_this, arguments);
    };
    this.mousemove = function(e) {
      return ControllerUI.prototype.mousemove.apply(_this, arguments);
    };
    this.mouseup = function(e) {
      return ControllerUI.prototype.mouseup.apply(_this, arguments);
    };
    this.mousedown = function(e) {
      return ControllerUI.prototype.mousedown.apply(_this, arguments);
    };
    this.click = function(e) {
      return ControllerUI.prototype.click.apply(_this, arguments);
    };
    this.zoom_reset = function(e) {
      return ControllerUI.prototype.zoom_reset.apply(_this, arguments);
    };
    this.wheel = function(e) {
      return ControllerUI.prototype.wheel.apply(_this, arguments);
    };
    this.blur = function(e) {
      return ControllerUI.prototype.blur.apply(_this, arguments);
    };
    this.keyup = function(e) {
      return ControllerUI.prototype.keyup.apply(_this, arguments);
    };
    this.keydown = function(e) {
      return ControllerUI.prototype.keydown.apply(_this, arguments);
    };
    this.set_photo = function(photo_url) {
      return ControllerUI.prototype.set_photo.apply(_this, arguments);
    };
    this.get_submit_data = function() {
      return ControllerUI.prototype.get_submit_data.apply(_this, arguments);
    };
    this.s = new ControllerState(this, args);
    $(document).on('contextmenu', function(e) {
      _this.click(e);
      return false;
    });
    $(document).on('click', this.click).on('mousedown', this.mousedown).on('mouseup', this.mouseup).on('mousemove', this.mousemove).on('selectstart', function() {
      return false;
    });
    $(this.s.btn_draw).on('click', function() {
      if (!_this.s.draw_mode) {
        return _this.toggle_mode();
      }
    });
    $(this.s.btn_edit).on('click', function() {
      if (_this.s.draw_mode) {
        return _this.toggle_mode();
      }
    });
    $(this.s.btn_close).on('click', function() {
      if (!_this.s.loading) {
        return _this.close_poly();
      }
    });
    $(this.s.btn_delete).on('click', function() {
      if (!_this.s.loading) {
        return _this.delete_sel_poly();
      }
    });
    $(this.s.btn_zoom_reset).on('click', function() {
      if (!_this.s.loading) {
        return _this.zoom_reset();
      }
    });
    $('#modal-instructions').on('show', function() {
      return _this.s.log.action({
        name: "ShowInstructions"
      });
    });
    $('#modal-instructions').on('hide', function() {
      return _this.s.log.action({
        name: "HideInstructions"
      });
    });
    $('.modal').on('show', function() {
      _this.s.modal_count += 1;
      return true;
    });
    $('.modal').on('hide', function() {
      _this.s.modal_count -= 1;
      return true;
    });
    $(window).on('mousewheel DOMMouseScroll', this.wheel);
    $(window).on('keydown', this.keydown).on('keyup', this.keyup).on('blur', this.blur);
    this.num_failed_closes = 0;
    if (args.photo_url != null) {
      this.set_photo(args.photo_url);
    }
  }

  ControllerUI.prototype.get_submit_data = function() {
    return this.s.get_submit_data();
  };

  ControllerUI.prototype.set_photo = function(photo_url) {
    var _this = this;
    this.s.disable_buttons();
    this.s.loading = true;
    return this.s.stage_ui.set_photo(photo_url, this, function() {
      console.log("loaded photo_url: " + photo_url);
      _this.s.loading = false;
      return _this.s.update_buttons();
    });
  };

  ControllerUI.prototype.keydown = function(e) {
    if (this.s.modal_count > 0) {
      return true;
    }
    switch (e.keyCode) {
      case 37:
        this.s.translate_delta(-20, 0);
        return false;
      case 38:
        this.s.translate_delta(0, -20);
        return false;
      case 39:
        this.s.translate_delta(20, 0);
        return false;
      case 40:
        this.s.translate_delta(0, 20);
        return false;
      case 32:
        this.s.panning = true;
        this.s.update_cursor();
        return false;
      case 68:
        if (!this.s.draw_mode) {
          this.toggle_mode();
        }
        return false;
      case 65:
        if (this.s.draw_mode) {
          this.toggle_mode();
        }
        return false;
      case 46:
      case 8:
        if (this.s.draw_mode) {
          this.remove_open_poly();
        } else {
          this.delete_sel_poly();
        }
        return false;
      case 27:
        if (this.s.draw_mode) {
          this.s.zoom_reset();
        } else {
          this.unselect_poly();
        }
        return false;
      default:
        return true;
    }
  };

  ControllerUI.prototype.keyup = function(e) {
    this.s.panning = false;
    if (this.s.modal_count > 0) {
      return true;
    }
    this.s.update_cursor();
    return true;
  };

  ControllerUI.prototype.blur = function(e) {
    this.s.panning = false;
    this.s.mousedown = false;
    if (this.s.modal_count > 0) {
      return true;
    }
    this.s.update_cursor();
    return true;
  };

  ControllerUI.prototype.wheel = function(e) {
//    var oe;
//      oe = e.originalEvent;
//      if (oe.wheelDelta != null) {
//          if (oe.wheelDelta > 0){
//              $('#btn-zoom-in').trigger('click');
//          }else{
//              $('#btn-zoom-out').trigger('click');
//          }
//      }

    if (this.s.modal_count > 0) {
      return true;
    }
    oe = e.originalEvent;
    if (oe.wheelDelta != null) {
      this.s.zoom_delta(oe.wheelDelta);
    } else {
      this.s.zoom_delta(oe.detail * -60);
    }
    window.scrollTo(0, 0);
    return stop_event(e);
  };

  ControllerUI.prototype.zoom_reset = function(e) {
    return this.s.zoom_reset();
  };

  ControllerUI.prototype.click = function(e) {
    var p, ue;
    if (this.s.panning) {
      return;
    }
    p = this.s.mouse_pos();
    if (p == null) {
      return;
    }
    if (!this.s.loading && this.s.draw_mode) {
      if (e.button > 1) {
        return this.close_poly();
      } else {
        if (this.s.open_poly != null) {
          ue = new UEPushPoint(p);
          if (this.s.open_poly.poly.can_push_point(p)) {
            this.s.undoredo.run(ue);
          } else {
            this.s.log.attempted(ue.entry());
          }
        } else {
          this.s.undoredo.run(new UECreatePolygon(this.s.stage_ui.mouse_pos()));
        }
        return this.s.stage_ui.translate_mouse_click();
      }
    }
  };

  ControllerUI.prototype.mousedown = function(e) {
    if (this.s.modal_count > 0) {
      return true;
    }
    this.s.mousedown = true;
    this.s.mousepos = {
      x: e.pageX,
      y: e.pageY
    };
    this.s.update_cursor();
    return !this.s.panning;
  };

  ControllerUI.prototype.mouseup = function(e) {
    this.s.mousedown = false;
    if (this.s.modal_count > 0) {
      return true;
    }
    this.s.update_cursor();
    return !this.s.panning;
  };

  ControllerUI.prototype.mousemove = function(e) {
    var scale;
    if (this.s.modal_count > 0) {
      return true;
    }
    if (this.s.mousedown && this.s.panning) {
      scale = 1.0 / this.s.stage_ui.get_zoom_factor();
      this.s.stage_ui.translate_delta(scale * (this.s.mousepos.x - e.pageX), scale * (this.s.mousepos.y - e.pageY), false);
      this.s.mousepos = {
        x: e.pageX,
        y: e.pageY
      };
    }
    return true;
  };

  ControllerUI.prototype.update = function() {
    var _ref, _ref1;
    if ((_ref = this.s.open_poly) != null) {
      _ref.update(this);
    }
    return (_ref1 = this.s.sel_poly) != null ? _ref1.update(this) : void 0;
  };

  ControllerUI.prototype.close_poly = function() {
    var pts, ue;
    if (!this.s.loading) {
      ue = new UEClosePolygon();
      if (this.s.can_close()) {
        return this.s.undoredo.run(ue);
      } else {
        this.s.log.attempted(ue.entry());
        if (this.s.open_poly != null) {
          pts = this.s.open_poly.poly.points;
          if (pts.length >= 2) {
            this.s.stage_ui.error_line(pts[0], pts[pts.length - 1]);
            this.num_failed_closes += 1;
          }
        }
        if (this.num_failed_closes >= 3) {
          this.num_failed_closes = 0;
          return $('#poly-modal-intersect').modal('show');
        }
      }
    }
  };

  ControllerUI.prototype.select_poly = function(id) {
    return this.s.undoredo.run(new UESelectPolygon(id));
  };

  ControllerUI.prototype.unselect_poly = function(id) {
    return this.s.undoredo.run(new UEUnselectPolygon());
  };

  ControllerUI.prototype.remove_open_poly = function(id) {
    return this.s.undoredo.run(new UERemoveOpenPoly());
  };

  ControllerUI.prototype.delete_sel_poly = function() {
    var ue;
    ue = new UEDeletePolygon();
    if (this.s.can_delete_sel()) {
      return this.s.undoredo.run(ue);
    } else {
      return this.s.log.attempted(ue.entry());
    }
  };

  ControllerUI.prototype.start_drag_point = function(i) {
    var p;
    p = this.s.sel_poly.poly.get_pt(i);
    this.s.drag_valid_point = clone_pt(p);
    return this.s.drag_start_point = clone_pt(p);
  };

  ControllerUI.prototype.revert_drag_point = function(i) {
    return this.s.undoredo.run(new UEDragVertex(i, this.s.drag_start_point, this.s.drag_valid_point));
  };

  ControllerUI.prototype.progress_drag_point = function(i, p) {
    this.s.sel_poly.poly.set_point(i, p);
    if (this.drag_valid(i)) {
      return this.s.drag_valid_point = clone_pt(p);
    }
  };

  ControllerUI.prototype.finish_drag_point = function(i, p) {
    this.s.undoredo.run(new UEDragVertex(i, this.s.drag_start_point, p));
    this.s.drag_valid_point = null;
    return this.s.drag_start_point = null;
  };

  ControllerUI.prototype.drag_valid = function(i) {
    return !this.s.sel_poly.poly.self_intersects_at_index(i);
  };

  ControllerUI.prototype.toggle_mode = function() {
    return this.s.undoredo.run(new UEToggleMode());
  };

  ControllerUI.prototype.on_photo_loaded = function() {
    this.s.update_buttons();
    return this.s.stage_ui.init_events();
  };

  return ControllerUI;

})();

StageUI = (function() {

  function StageUI(ui, args) {
    var _this = this;
    this.bbox = {
      width: args.width,
      height: args.height
    };
    this.size = {
      width: args.width,
      height: args.height
    };
    this.origin = {
      x: 0,
      y: 0
    };
    this.zoom_exp = 0;
    this.zoom_exp_max = 7;
    this.stage = new Kinetic.Stage({
      container: args.container_id,
      width: this.size.width,
      height: this.size.height
    });
    this.layer = new Kinetic.Layer();
    this.stage.add(this.layer);
    this.stage.on('mouseout', function() {
      return _this.layer.draw();
    });
    this.stage.on('mousemove', function() {
      if (!ui.s.panning) {
        return ui.update();
      }
    });
  }

  StageUI.prototype.add = function(o, opacity, duration) {
    if (opacity == null) {
      opacity = 1.0;
    }
    if (duration == null) {
      duration = 0.4;
    }
    this.layer.add(o);
    if (duration > 0) {
      o.setOpacity(0);
      return o.add_trans = o.transitionTo({
        opacity: opacity,
        duration: duration
      });
    } else {
      return o.setOpacity(opacity);
    }
  };

  StageUI.prototype.remove = function(o, duration) {
    var _ref;
    if (duration == null) {
      duration = 0.4;
    }
    if (o != null) {
      if ((_ref = o.add_trans) != null) {
        _ref.stop();
      }
      if (duration > 0) {
        o.removing = true;
        return o.transitionTo({
          opacity: 0,
          duration: duration,
          callback: (function(o) {
            return function() {
              return o.remove();
            };
          })(o)
        });
      } else {
        return o.remove();
      }
    }
  };

  StageUI.prototype.draw = function() {
    return this.layer.draw();
  };

  StageUI.prototype.mouse_pos = function() {
    var p, scale;
    p = this.stage.getMousePosition();
    if (p == null) {
      return p;
    } else {
      scale = Math.pow(2, -this.zoom_exp);
      return {
        x: Math.min(Math.max(0, p.x * scale + this.origin.x), this.size.width),
        y: Math.min(Math.max(0, p.y * scale + this.origin.y), this.size.height)
      };
    }
  };

  StageUI.prototype.zoom_reset = function(redraw) {
    if (redraw == null) {
      redraw = true;
    }
    this.zoom_exp = 0;
    this.origin = {
      x: 0,
      y: 0
    };
    this.stage.setOffset(this.origin.x, this.origin.y);
    this.stage.setScale(1.0);
    if (redraw) {
      return this.stage.draw();
    }
  };

  StageUI.prototype.zoom_delta = function(delta, p) {
    if (p == null) {
      p = this.stage.getMousePosition();
    }
    if (delta != null) {
      return this.zoom_set(this.zoom_exp + delta * 0.001, p);
    }
  };

  StageUI.prototype.get_zoom_factor = function() {
    return Math.pow(2, this.zoom_exp);
  };

  StageUI.prototype.zoom_set = function(new_zoom_exp, p) {
    var f, new_scale, old_scale;
    if (p == null) {
      p = this.stage.getMousePosition();
    }
    if ((this.k_loading != null) || (new_zoom_exp == null) || (p == null)) {
      return;
    }
    old_scale = Math.pow(2, this.zoom_exp);
    this.zoom_exp = Math.min(this.zoom_exp_max, new_zoom_exp);
    if (this.zoom_exp <= 0) {
        return this.zoom_reset();
    } else {
      new_scale = Math.pow(2, this.zoom_exp);
      f = 1.0 / old_scale - 1.0 / new_scale;
      this.origin.x += f * p.x;
      this.origin.y += f * p.y;
      this.stage.setOffset(this.origin.x, this.origin.y);
      this.stage.setScale(new_scale);
      return this.stage.draw();
    }
  };

  StageUI.prototype.zoom_box = function(aabb) {
    var b, max, min, obj;
    min = {
      x: aabb.min.x - 50,
      y: aabb.min.y - 50
    };
    max = {
      x: aabb.max.x + 50,
      y: aabb.max.y + 50
    };
    obj = {
      width: max.x - min.x,
      height: max.y - min.y
    };
    b = compute_dimensions(obj, this.bbox, INF);
    this.zoom_exp = Math.max(0, Math.min(this.zoom_exp_max, Math.log(b.scale) / Math.log(2)));
    if (this.zoom_exp <= 0) {
      return this.zoom_reset();
    } else {
      this.origin = min;
      this.stage.setOffset(this.origin.x, this.origin.y);
      this.stage.setScale(Math.pow(2, this.zoom_exp));
      return this.stage.draw();
    }
  };

  StageUI.prototype.translate_delta = function(x, y, transition) {
    if (transition == null) {
      transition = true;
    }
    if (!this.k_loading) {
      this.origin.x += x;
      this.origin.y += y;
      if (transition) {
        this.stage.transitionTo({
          offset: clone_pt(this.origin),
          duration: 0.1
        });
      } else {
        this.stage.setOffset(this.origin.x, this.origin.y);
      }
      return this.stage.draw();
    }
  };

  StageUI.prototype.translate_mouse_click = function() {
    var delta, factor, p;
    if (this.zoom_exp > 0 && !this.k_loading) {
      p = this.stage.getMousePosition();
      p = {
        x: p.x / this.stage.getWidth(),
        y: p.y / this.stage.getHeight()
      };
      console.log('p:', p);
      delta = {
        x: 0,
        y: 0
      };
      factor = this.get_zoom_factor();
      if (p.x < 0.05) {
        delta.x = -200 / this.get_zoom_factor();
      } else if (p.x > 0.95) {
        delta.x = 200 / this.get_zoom_factor();
      }
      if (p.y < 0.05) {
        delta.y = -200 / this.get_zoom_factor();
      } else if (p.y > 0.95) {
        delta.y = 200 / this.get_zoom_factor();
      }
      if (delta.x !== 0 || delta.y !== 0) {
        return this.translate_delta(delta.x, delta.y);
      }
    }
  };

  StageUI.prototype.error_line = function(p1, p2) {
    var el;
    el = new Kinetic.Line({
      points: [clone_pt(p1), clone_pt(p2)],
      opacity: 0.5,
      stroke: "#F00",
      strokeWidth: 10 / this.get_zoom_factor(),
      lineCap: "round"
    });
    this.layer.add(el);
    return this.remove(el);
  };

  StageUI.prototype.add_loading = function() {
    if (this.k_loading == null) {
      this.k_loading = new Kinetic.Text({
        x: 30,
        y: 30,
        text: "Loading...",
        align: "left",
        fontSize: 32,
        fontFamily: "Helvetica,Verdana,Ariel",
        textFill: "#000"
      });
      this.add(this.k_loading);
      return this.draw();
    }
  };

  StageUI.prototype.remove_loading = function() {
    if (this.k_loading != null) {
      this.remove(this.k_loading);
      this.k_loading = null;
      return this.draw();
    }
  };

  StageUI.prototype.set_photo = function(photo_url, ui, on_load) {
    var _this = this;
    this.add_loading();
    this.photo_obj = new Image();
    this.photo_obj.src = photo_url;
    return this.photo_obj.onload = (function() {
      return function() {
        _this.remove_loading();
        _this.size = compute_dimensions(_this.photo_obj, _this.bbox);
        _this.photo = new Kinetic.Image({
          x: 0,
          y: 0,
          image: _this.photo_obj,
          width: _this.size.width,
          height: _this.size.height
        });
        _this.layer.add(_this.photo);
        _this.photo.moveToBottom();
        _this.ready = true;
        _this.photo.on('mousedown', function() {
          if (!ui.s.panning) {
            return ui.unselect_poly();
          }
        });
        return typeof on_load === "function" ? on_load() : void 0;
      };
    })();
  };

  return StageUI;

})();

UEToggleMode = (function(_super) {

  __extends(UEToggleMode, _super);

  function UEToggleMode() {
    this.open_points = null;
    this.sel_poly_id = null;
  }

  UEToggleMode.prototype.run = function(ui) {
    var _ref;
    if (ui.s.draw_mode) {
      if (ui.s.open_poly != null) {
        this.open_points = ui.s.open_poly.poly.clone_points();
      }
    } else {
      this.sel_poly_id = (_ref = ui.s.sel_poly) != null ? _ref.id : void 0;
    }
    ui.s.toggle_mode();
    return ui.s.update_buttons();
  };

  UEToggleMode.prototype.redo = function(ui) {
    ui.s.toggle_mode();
    return ui.s.update_buttons();
  };

  UEToggleMode.prototype.undo = function(ui) {
    var _ref, _ref1;
    ui.s.toggle_mode();
    if (ui.s.draw_mode) {
      if (this.open_points != null) {
        return (_ref = ui.s.create_poly(this.open_points)) != null ? _ref.update(ui) : void 0;
      }
    } else {
      if (this.sel_poly_id != null) {
        return (_ref1 = ui.s.select_poly(ui, this.sel_poly_id)) != null ? _ref1.update(ui) : void 0;
      }
    }
  };

  UEToggleMode.prototype.entry = function() {
    return {
      name: "UEToggleMode"
    };
  };

  return UEToggleMode;

})(UndoableEvent);

UERemoveOpenPoly = (function(_super) {

  __extends(UERemoveOpenPoly, _super);

  function UERemoveOpenPoly() {
    this.open_points = null;
  }

  UERemoveOpenPoly.prototype.run = function(ui) {
    if (ui.s.open_poly != null) {
      this.open_points = ui.s.open_poly.poly.clone_points();
    }
    ui.s.remove_open_poly();
    return ui.s.update_buttons();
  };

  UERemoveOpenPoly.prototype.redo = function(ui) {
    ui.s.remove_open_poly();
    return ui.s.update_buttons();
  };

  UERemoveOpenPoly.prototype.undo = function(ui) {
    var _ref;
    if (this.open_points != null) {
      return (_ref = ui.s.create_poly(this.open_points)) != null ? _ref.update(ui) : void 0;
    }
  };

  UERemoveOpenPoly.prototype.entry = function() {
    return {
      name: "UERemoveOpenPoly"
    };
  };

  return UERemoveOpenPoly;

})(UndoableEvent);

UEPushPoint = (function(_super) {

  __extends(UEPushPoint, _super);

  function UEPushPoint(p) {
    this.p = clone_pt(p);
  }

  UEPushPoint.prototype.run = function(ui) {
    var _ref;
    return (_ref = ui.s.push_point(this.p)) != null ? _ref.update(ui) : void 0;
  };

  UEPushPoint.prototype.undo = function(ui) {
    var _ref;
    return (_ref = ui.s.pop_point()) != null ? _ref.update(ui) : void 0;
  };

  UEPushPoint.prototype.entry = function() {
    return {
      name: "UEPushPoint",
      args: {
        p: this.p
      }
    };
  };

  return UEPushPoint;

})(UndoableEvent);

UECreatePolygon = (function(_super) {

  __extends(UECreatePolygon, _super);

  function UECreatePolygon(p) {
    this.p = clone_pt(p);
  }

  UECreatePolygon.prototype.run = function(ui) {
    var _ref;
    return (_ref = ui.s.create_poly([this.p])) != null ? _ref.update(ui) : void 0;
  };

  UECreatePolygon.prototype.undo = function(ui) {
    var _ref;
    return (_ref = ui.s.remove_open_poly()) != null ? _ref.update(ui) : void 0;
  };

  UECreatePolygon.prototype.entry = function() {
    return {
      name: "UECreatePolygon",
      args: {
        p: this.p
      }
    };
  };

  return UECreatePolygon;

})(UndoableEvent);

UEClosePolygon = (function(_super) {

  __extends(UEClosePolygon, _super);

  function UEClosePolygon() {
    return UEClosePolygon.__super__.constructor.apply(this, arguments);
  }

  UEClosePolygon.prototype.run = function(ui) {
    var _ref;
    return (_ref = ui.s.close_poly()) != null ? _ref.update(ui) : void 0;
  };

  UEClosePolygon.prototype.undo = function(ui) {
    var _ref;
    return (_ref = ui.s.unclose_poly()) != null ? _ref.update(ui) : void 0;
  };

  UEClosePolygon.prototype.entry = function() {
    return {
      name: "UEClosePolygon"
    };
  };

  return UEClosePolygon;

})(UndoableEvent);

UESelectPolygon = (function(_super) {

  __extends(UESelectPolygon, _super);

  function UESelectPolygon(id) {
    this.id = id;
  }

  UESelectPolygon.prototype.run = function(ui) {
    var _ref;
    this.sel_poly_id = (_ref = ui.s.sel_poly) != null ? _ref.id : void 0;
    return ui.s.select_poly(ui, this.id);
  };

  UESelectPolygon.prototype.undo = function(ui) {
    if (this.sel_poly_id != null) {
      return ui.s.select_poly(ui, this.sel_poly_id);
    } else {
      return ui.s.unselect_poly();
    }
  };

  UESelectPolygon.prototype.redo = function(ui) {
    return ui.s.select_poly(ui, this.id);
  };

  UESelectPolygon.prototype.entry = function() {
    return {
      name: "UESelectPolygon",
      args: {
        id: this.id
      }
    };
  };

  return UESelectPolygon;

})(UndoableEvent);

UEUnselectPolygon = (function(_super) {

  __extends(UEUnselectPolygon, _super);

  function UEUnselectPolygon() {}

  UEUnselectPolygon.prototype.run = function(ui) {
    var _ref;
    this.sel_poly_id = (_ref = ui.s.sel_poly) != null ? _ref.id : void 0;
    return ui.s.unselect_poly();
  };

  UEUnselectPolygon.prototype.undo = function(ui) {
    if (this.sel_poly_id != null) {
      return ui.s.select_poly(ui, this.sel_poly_id);
    }
  };

  UEUnselectPolygon.prototype.redo = function(ui) {
    return ui.s.unselect_poly();
  };

  UEUnselectPolygon.prototype.entry = function() {
    return {
      name: "UEUnselectPolygon"
    };
  };

  return UEUnselectPolygon;

})(UndoableEvent);

UEDeletePolygon = (function(_super) {

  __extends(UEDeletePolygon, _super);

  function UEDeletePolygon() {
    return UEDeletePolygon.__super__.constructor.apply(this, arguments);
  }

  UEDeletePolygon.prototype.run = function(ui) {
    var i, p, _i, _len, _ref, _results;
    this.points = ui.s.sel_poly.poly.clone_points();
    this.time_ms = ui.s.sel_poly.time_ms;
    this.time_active_ms = ui.s.sel_poly.time_active_ms;
    this.sel_poly_id = ui.s.sel_poly.id;
    ui.s.delete_sel_poly();
    _ref = ui.s.closed_polys;
    _results = [];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      p = _ref[i];
      p.id = i;
      _results.push(p.update(ui));
    }
    return _results;
  };

  UEDeletePolygon.prototype.undo = function(ui) {
    var i, p, _i, _len, _ref;
    ui.s.insert_closed_poly(this.points, this.sel_poly_id, this.time_ms, this.time_active_ms);
    _ref = ui.s.closed_polys;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      p = _ref[i];
      p.id = i;
      p.update(ui);
    }
    return ui.s.select_poly(ui, this.sel_poly_id);
  };

  UEDeletePolygon.prototype.entry = function() {
    return {
      name: "UEDeletePolygon"
    };
  };

  return UEDeletePolygon;

})(UndoableEvent);

UEDragVertex = (function(_super) {

  __extends(UEDragVertex, _super);

  function UEDragVertex(i, p0, p1) {
    this.i = i;
    this.p0 = clone_pt(p0);
    this.p1 = clone_pt(p1);
  }

  UEDragVertex.prototype.run = function(ui) {
    var sp;
    sp = ui.s.sel_poly;
    sp.poly.set_point(this.i, this.p1);
    sp.anchors[this.i].setPosition(this.p1.x, this.p1.y);
    return sp.update(ui);
  };

  UEDragVertex.prototype.undo = function(ui) {
    var sp;
    sp = ui.s.sel_poly;
    sp.poly.set_point(this.i, this.p0);
    sp.anchors[this.i].setPosition(this.p0.x, this.p0.y);
    return sp.update(ui);
  };

  UEDragVertex.prototype.entry = function() {
    return {
      name: "UEDragVertex",
      args: {
        i: this.i,
        p0: this.p0,
        p1: this.p1
      }
    };
  };

  return UEDragVertex;

})(UndoableEvent);

$(function() {
  template_args.width = $('#mt-container').width() - 4;
  template_args.height = $(window).height() - $('#mt-top-nohover').height() - 16;
  template_args.container_id = 'mt-container';
  $('#poly-container').width(template_args.width).height(template_args.height);
  return window.controller_ui = new ControllerUI(template_args);
});

btn_submit = function() {
  return window.mt_submit(window.controller_ui.get_submit_data);
};

$(window).on('load', function() {
  return $('#btn-submit').on('click', btn_submit);
});

window.load_start = Date.now();

$(window).on('load', function() {
  return window.time_load_ms = +(Date.now() - window.load_start);
});

$(function() {
  var mt_submit_error, mt_submit_impl, mt_submit_ready;
  mt_submit_ready = false;
  window.mt_submit_ready = function(data_callback) {
    var btn;
    if (!mt_submit_ready) {
      mt_submit_ready = true;
      btn = $('#btn-submit').removeAttr('disabled');
      if (data_callback != null) {
        return btn.on('click', window.mt_submit(data_callback));
      }
    }
  };
  window.mt_submit_not_ready = function(disable) {
    if (disable == null) {
      disable = true;
    }
    if (mt_submit_ready) {
      mt_submit_ready = false;
      if (disable) {
        return $('#btn-submit').attr('disabled', 'disabled').off('click');
      }
    }
  };
  window.mt_submit = function(data_callback) {
    var do_submit;
    mt_submit_ready = true;
    do_submit = mt_submit_impl(data_callback);
    if (window.ask_for_feedback === true && (window.show_modal_feedback != null) && (window.feedback_bonus != null)) {
      return window.show_modal_feedback('Thank you!', ("<p>We will give a bonus of " + window.feedback_bonus + " if you help us improve ") + 'the task and answer these questions.</p>' + '<p>If you don\'t want to answer, just click "Submit".</p>', do_submit);
    } else {
      return do_submit();
    }
  };
  window.mt_submit_partial = function(data) {
    console.log("partial submit data:");
    console.log(data);
    return $.ajax({
      type: 'POST',
      url: window.location.href,
      data: $.extend(true, {
        partial: true,
        screen_width: screen.width,
        screen_height: screen.height,
        time_load_ms: window.time_load_ms
      }, data),
      contentType: "application/json; charset=utf-8",
      dataType: 'json',
      success: function(data, status, jqxhr) {
        console.log("partial submit success: data:");
        return console.log(data);
      },
      error: function() {
        return console.log("partial submit error");
      }
    });
  };
  mt_submit_error = function(msg) {
    return hide_modal_loading(function() {
      return window.show_modal_error(msg);
    });
  };
  return mt_submit_impl = function(data_callback) {
    return ctrler.submit_form(data_callback);
  };
});

$(function() {
  var on_scroll;
  $("a.endless_more").live("click", function() {
    var container, get_data, get_url;
    container = $(this).closest(".endless_container");
    get_url = $(this).attr("href");
    $(this).remove();
    container.find(".endless_loading").show();
    get_data = "querystring_key=" + $(this).attr("rel").split(" ")[0];
    $.get(get_url, get_data, function(data) {
      container.before(data);
      container.remove();
      return $(document).trigger("items-added");
    });
    return false;
  });
  $("a.endless_page_link").live("click", function() {
    var data, page_template;
    page_template = $(this).closest(".endless_page_template");
    if (!page_template.hasClass("endless_page_skip")) {
      data = "querystring_key=" + $(this).attr("rel").split(" ")[0];
      page_template.load($(this).attr("href"), data);
      return false;
    }
  });
  on_scroll = function() {
    var delta;
    delta = $(document).height() - $(window).height() - $(window).scrollTop();
    if (delta <= 3200) {
      return $("a.endless_more").click();
    }
  };
  $(window).on('scroll', on_scroll);
  on_scroll();
  return setTimeout((function() {
    return $("a.endless_more").click();
  }), 1000);
});

$(function() {
  var $nav, isFixed, navTop, on_scroll;
  isFixed = false;
  $nav = $("#subnav");
  if (!$nav.length) {
    return;
  }
  navTop = $nav.offset().top - $(".navbar").first().height() - 20;
  on_scroll = function() {
    var $after, scrollTop;
    $after = $("#subnav-after");
    scrollTop = $(window).scrollTop();
    if (scrollTop >= navTop && !isFixed) {
      isFixed = true;
      $nav.addClass("subnav-fixed");
      return $after.addClass("subnav-after-fixed");
    } else if (scrollTop <= navTop && isFixed) {
      isFixed = false;
      $nav.removeClass("subnav-fixed");
      return $after.removeClass("subnav-after-fixed");
    }
  };
  $(window).on("scroll", on_scroll);
  return on_scroll();
});

$(function() {
  var on_items_added;
  on_items_added = function() {
    $(".nav-tabs").button();
    $(".tool").removeClass("tool").tooltip({
      placement: "bottom",
      trigger: "hover"
    });
    return $(".pop").removeClass("pop").popover({
      placement: "bottom",
      trigger: "hover"
    });
  };
  $(document).on("items-added", on_items_added);
  on_items_added();
  return $("body").delegate(".entry-thumb", "mouseover", function() {
    return $(this).addClass("entry-thumb-hover");
  }).delegate(".entry-thumb", "mouseout", function() {
    return $(this).removeClass("entry-thumb-hover");
  });
});

if ($.browser.msie) {
  console.log('detected: IE');
  (function() {
    var fix_ie;
    fix_ie = function() {
      return $('.nss').css('vector-effect', '').css('stroke-width', '0.2%').css('stroke-linecap', 'round');
    };
    fix_ie();
    return $(document).on('items-added', fix_ie);
  })();
  if (Number($.browser.version) < 10) {
    $('#outdated-browser-alert').show();
  }
}

if (!($.browser.webkit || $.browser.opera)) {
  fix_aspect = function() {
    return $('svg.fix-aspect').each(function() {
      var aspect, t;
      t = $(this);
      aspect = t.attr('data-aspect');
      if (aspect != null) {
        return t.height(t.width() / aspect);
      }
    });
  };
  fix_aspect();
  $(document).on('items-added', fix_aspect);
  $(window).on('resize', fix_aspect);
}

if (!$.browser.webkit) {
  $('.if-not-webkit').show();
}

jQuery.fn.extend({
  getUrlParam: function(strParamName) {
    var qString, query, returnVal, strHref, strQueryString;
    strParamName = escape(unescape(strParamName));
    if ($(this).attr("nodeName") === "#document") {
      if (window.location.search.search(strParamName) > -1) {
        qString = window.location.search.substr(1, window.location.search.length).split("&");
      }
    } else if ($(this).attr("src") !== "undefined") {
      strHref = $(this).attr("src");
      if (strHref.indexOf("?") > -1) {
        strQueryString = strHref.substr(strHref.indexOf("?") + 1);
        qString = strQueryString.split("&");
      }
    } else if ($(this).attr("href") !== "undefined") {
      strHref = $(this).attr("href");
      if (strHref.indexOf("?") > -1) {
        strQueryString = strHref.substr(strHref.indexOf("?") + 1);
        qString = strQueryString.split("&");
      }
    } else {
      return null;
    }
    if (!qString) {
      return null;
    }
    returnVal = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = qString.length; _i < _len; _i++) {
        query = qString[_i];
        if (escape(unescape(query.split("=")[0])) === strParamName) {
          _results.push(query.split("=")[1]);
        }
      }
      return _results;
    })();
    if (returnVal.lenght === 0) {
      return null;
    } else if (returnVal.lenght === 1) {
      return returnVal[0];
    } else {
      return returnVal;
    }
  }
});

POLYGON_COLORS = ['#5D8AA8', '#3B7A57', '#915C83', '#A52A2A', '#FFE135', '#2E5894', '#3D2B1F', '#FE6F5E', '#ACE5EE', '#006A4E', '#873260', '#CD7F32', '#BD33A4', '#1E4D2B', '#DE6FA1', '#965A3E', '#002E63', '#FF3800', '#007BBB', '#6F4E37', '#0F4D92', '#9F1D35', '#B78727', '#8878C3', '#30D5C8', '#417DC1', '#FF6347'];

set_btn_enabled = function(selector, enabled) {
  if (enabled == null) {
    enabled = true;
  }
  if (enabled) {
    return $(selector).removeAttr('disabled');
  } else {
    return $(selector).attr('disabled', 'disabled');
  }
};

select_image_url = function(urls, size) {
  var best_k, best_v, k, v;
  best_k = 65536;
  best_v = urls.orig;
  for (k in urls) {
    v = urls[k];
    if (!(k !== 'orig')) {
      continue;
    }
    k = Number(k);
    if (k >= size && k < best_k) {
      best_k = k;
      best_v = v;
    }
  }
  return best_v;
};

get_cors_url = function(url) {
  if (url.indexOf('?') === -1) {
    if (url.indexOf("?origin=") === -1) {
      return url + '?origin=' + window.location.host;
    } else {
      return url;
    }
  } else {
    if (url.indexOf("&origin=") === -1) {
      return url + '&origin=' + window.location.host;
    } else {
      return url;
    }
  }
};

load_cors_image = function(url, onload) {
  var img;
  if (onload == null) {
    onload = null;
  }
  img = new Image();
  img.crossOrigin = '';
  if (onload) {
    img.onload = onload;
  }
  img.src = get_cors_url(url);
  return img;
};

compute_dimensions = function(obj, bbox, max_scale) {
  var scale_x, scale_y;
  if (max_scale == null) {
    max_scale = 2;
  }
  scale_x = bbox.width / obj.width;
  scale_y = bbox.height / obj.height;
  if (scale_x < scale_y) {
    if (scale_x < max_scale) {
      return {
        width: bbox.width,
        height: obj.height * scale_x,
        scale: scale_x
      };
    }
  } else {
    if (scale_y < max_scale) {
      return {
        width: obj.width * scale_y,
        height: bbox.height,
        scale: scale_y
      };
    }
  }
  return {
    width: obj.width * max_scale,
    height: obj.height * max_scale,
    scale: max_scale
  };
};

stop_event = function(e) {
  if (e == null) {
    e = window.event;
  }
  if (typeof e.stopPropagation === "function") {
    e.stopPropagation();
  }
  if (typeof e.preventDefault === "function") {
    e.preventDefault();
  }
  e.cancelBubble = true;
  e.returnValue = false;
  e.cancel = true;
  return false;
};

rgb_to_hsv = function(r, g, b) {
  var d, h, max, min, s, v;
  r = r / 255;
  g = g / 255;
  b = b / 255;
  max = Math.max(r, g, b);
  min = Math.min(r, g, b);
  v = max;
  d = max - min;
  s = (max === 0 ? 0 : d / max);
  if (max === min) {
    h = 0;
  } else {
    switch (max) {
      case r:
        h = (g - b) / d + (g < b ? 6 : 0);
        break;
      case g:
        h = (b - r) / d + 2;
        break;
      case b:
        h = (r - g) / d + 4;
    }
    h /= 6;
  }
  return [h, s, v];
};

hsv_to_rgb = function(h, s, v) {
  var b, f, g, i, p, q, r, t;
  i = Math.floor(h * 6);
  f = h * 6 - i;
  p = v * (1 - s);
  q = v * (1 - f * s);
  t = v * (1 - (1 - f) * s);
  switch (i % 6) {
    case 0:
      r = v;
      g = t;
      b = p;
      break;
    case 1:
      r = q;
      g = v;
      b = p;
      break;
    case 2:
      r = p;
      g = v;
      b = t;
      break;
    case 3:
      r = p;
      g = q;
      b = v;
      break;
    case 4:
      r = t;
      g = p;
      b = v;
      break;
    case 5:
      r = v;
      g = p;
      b = q;
  }
  return [r * 255, g * 255, b * 255];
};

INF = Number.POSITIVE_INFINITY;

NINF = Number.NEGATIVE_INFINITY;

AABB = (function() {

  function AABB(min, max) {
    if (min == null) {
      min = {
        x: INF,
        y: INF
      };
    }
    if (max == null) {
      max = {
        x: NINF,
        y: NINF
      };
    }
    this.min = clone_pt(min);
    this.max = clone_pt(max);
  }

  AABB.prototype.reset = function() {
    this.min = {
      x: INF,
      y: INF
    };
    return this.max = {
      x: NINF,
      y: NINF
    };
  };

  AABB.prototype.clone = function() {
    return new AABB(this.min, this.max);
  };

  AABB.prototype.midpoint = function() {
    return {
      x: 0.5 * (this.min.x + this.max.x),
      y: 0.5 * (this.min.y + this.max.y)
    };
  };

  AABB.prototype.contains_pt = function(p) {
    return p.x >= this.min.x && p.x <= this.max.x && p.y >= this.min.y && p.y <= this.max.y;
  };

  AABB.prototype.intersects_bbox = function(b) {
    return this.max.x >= b.min.x && this.min.x <= b.max.x && this.max.y >= b.min.y && this.min.y <= b.max.y;
  };

  AABB.prototype.contains_bbox = function(b) {
    return this.max.x >= b.max.x && this.min.x <= b.min.x && this.max.y >= b.max.y && this.min.y <= b.min.y;
  };

  AABB.prototype.extend_pt = function(p) {
    this.min = {
      x: Math.min(this.min.x, p.x),
      y: Math.min(this.min.y, p.y)
    };
    return this.max = {
      x: Math.max(this.max.x, p.x),
      y: Math.max(this.max.y, p.y)
    };
  };

  AABB.prototype.recompute_from_points = function(points) {
    var p, _i, _len, _results;
    this.reset();
    _results = [];
    for (_i = 0, _len = points.length; _i < _len; _i++) {
      p = points[_i];
      _results.push(this.extend_pt(p));
    }
    return _results;
  };

  AABB.prototype.normalize_pt = function(p) {
    return {
      x: (p.x - this.min.x) / (this.max.x - this.min.x),
      y: (p.y - this.min.y) / (this.max.y - this.min.y)
    };
  };

  return AABB;

})();

Polygon = (function() {

  function Polygon(pts, open) {
    this.open = open != null ? open : true;
    this.aabb = new AABB();
    this.points = [];
    if (pts != null) {
      this.push_points(pts);
    }
  }

  Polygon.prototype.push_point = function(p) {
    if (p != null) {
      this.points.push(clone_pt(p));
      return this.aabb.extend_pt(p);
    }
  };

  Polygon.prototype.push_points = function(pts) {
    var p, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = pts.length; _i < _len; _i++) {
      p = pts[_i];
      _results.push(this.push_point(p));
    }
    return _results;
  };

  Polygon.prototype.pop_point = function(p) {
    var ret;
    if (this.points.length > 0) {
      ret = this.points.pop();
      this.aabb.recompute_from_points(this.points);
      return ret;
    }
  };

  Polygon.prototype.set_point = function(i, p) {
    if (p != null) {
      this.points[i].x = p.x;
      this.points[i].y = p.y;
      this.aabb.recompute_from_points(this.points);
      return p;
    }
  };

  Polygon.prototype.close = function() {
    return this.open = false;
  };

  Polygon.prototype.unclose = function() {
    return this.open = true;
  };

  Polygon.prototype.empty = function() {
    return this.points.length === 0;
  };

  Polygon.prototype.get_pt = function(i) {
    return clone_pt(this.points[i]);
  };

  Polygon.prototype.num_points = function() {
    return this.points.length;
  };

  Polygon.prototype.clone_points = function() {
    var p, _i, _len, _ref, _results;
    _ref = this.points;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      _results.push(clone_pt(p));
    }
    return _results;
  };

  Polygon.prototype.get_aabb = function() {
    return this.aabb.clone();
  };

  Polygon.prototype.can_push_point = function(p) {
    if (!this.open) {
      return false;
    }
    if (this.points.length < 3) {
      return true;
    }
    return !this.intersects_segment(this.points[this.points.length - 1], p, [this.points.length - 2]);
  };

  Polygon.prototype.can_close = function() {
    if (!this.open || this.points.length < 3) {
      return false;
    }
    if (this.points.length === 3) {
      return true;
    }
    return !this.intersects_segment(this.points[0], this.points[this.points.length - 1], [0, this.points.length - 2]);
  };

  Polygon.prototype.midpoint = function() {
    var p, x, y, _i, _len, _ref;
    if (this.points.length < 1) {
      return void 0;
    }
    x = y = 0;
    _ref = this.points;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      x += p.x;
      y += p.y;
    }
    return {
      x: x / this.points.length,
      y: y / this.points.length
    };
  };

  Polygon.prototype.centroid = function() {
    var A, Cx, Cy, i, t, v0, v1, _i, _len, _ref;
    if (this.points.length < 1) {
      return void 0;
    }
    A = Cx = Cy = 0;
    _ref = this.points;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      v0 = _ref[i];
      v1 = this.points[(i + 1) % this.points.length];
      t = v0.x * v1.y - v1.x * v0.y;
      A += t;
      Cx += (v0.x + v1.x) * t;
      Cy += (v0.y + v1.y) * t;
    }
    if (Math.abs(A) < 0.001) {
      return this.midpoint();
    }
    return {
      x: Cx / (3 * A),
      y: Cy / (3 * A)
    };
  };

  Polygon.prototype.aabb_midpoint = function() {
    return this.aabb.midpoint();
  };

  Polygon.prototype.area = function() {
    var A, i, v0, v1, _i, _len, _ref;
    A = 0;
    _ref = this.points;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      v0 = _ref[i];
      v1 = this.points[(i + 1) % this.points.length];
      A += v0.x * v1.y - v1.x * v0.y;
    }
    return Math.abs(A / 2);
  };

  Polygon.prototype.labelpos = function() {
    var best_d2, best_m, d2, del_tri, m, t, _i, _len;
    best_m = this.centroid();
    if (this.contains_pt(best_m)) {
      best_d2 = this.dist2_to_edge(best_m);
      if (best_d2 > 2000) {
        return best_m;
      }
    } else {
      best_d2 = 0;
    }
    del_tri = delaunay_triangulate(this.clone_points());
    for (_i = 0, _len = del_tri.length; _i < _len; _i++) {
      t = del_tri[_i];
      m = t.midpoint();
      if (this.contains_pt(m)) {
        d2 = this.dist2_to_edge(m);
        if (d2 > best_d2) {
          best_d2 = d2;
          best_m = m;
        }
      }
    }
    return best_m;
  };

  Polygon.prototype.is_convex = function() {
    var i, s, v0, v1, v2, _i, _len, _ref;
    s = true;
    _ref = this.points;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      v0 = _ref[i];
      v1 = this.points[(i + 1) % this.points.length];
      v2 = this.points[(i + 2) % this.points.length];
      if (i === 0) {
        s = ccw(v1, v0, v2);
      } else if (s !== ccw(v1, v0, v2)) {
        return false;
      }
    }
    return true;
  };

  Polygon.prototype.dist2_to_edge = function(p) {
    var i, min_d2, n, v0, v1, _i, _len, _ref;
    n = this.points.length;
    if (n < 2) {
      return 0;
    }
    min_d2 = Number.POSITIVE_INFINITY;
    _ref = this.points;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      v0 = _ref[i];
      v1 = this.points[(i + 1) % this.points.length];
      min_d2 = Math.min(min_d2, seg_pt_dist2(v0.x, v0.y, v1.x, v1.y, p.x, p.y));
    }
    return min_d2;
  };

  Polygon.prototype.intersects_segment = function(p1, p2, excludes) {
    var i, max, n, v1, v2, _i;
    if (excludes == null) {
      excludes = [];
    }
    n = this.points.length;
    if (n < 2) {
      return false;
    }
    max = this.open ? n - 1 : n;
    for (i = _i = 0; 0 <= max ? _i < max : _i > max; i = 0 <= max ? ++_i : --_i) {
      if (!(__indexOf.call(excludes, i) < 0)) {
        continue;
      }
      v1 = this.points[i];
      v2 = this.points[(i + 1) % n];
      if (segments_intersect(p1, p2, v1, v2)) {
        return true;
      }
    }
    return false;
  };

  Polygon.prototype.contains_pt = function(p) {
    var c, i, j, n, vi, vj;
    if (this.points.length < 3 || !this.aabb.contains_pt(p)) {
      return false;
    }
    n = this.points.length;
    c = false;
    i = 0;
    j = n - 1;
    while (i < n) {
      vi = this.points[i];
      if (vi.x === p.x && vi.y === p.y) {
        return true;
      }
      vj = this.points[j];
      if (((vi.y > p.y) !== (vj.y > p.y)) && (p.x < (vj.x - vi.x) * (p.y - vi.y) / (vj.y - vi.y) + vi.x)) {
        c = !c;
      }
      j = i++;
    }
    return c;
  };

  Polygon.prototype.self_intersects_at_index = function(i) {
    var m1, m2, p1;
    if (this.points.length < 4) {
      return false;
    }
    m2 = mod(i - 2, this.points.length);
    m1 = mod(i - 1, this.points.length);
    p1 = mod(i + 1, this.points.length);
    return this.intersects_segment(this.points[i], this.points[p1], [m1, i, p1]) || this.intersects_segment(this.points[i], this.points[m1], [m2, m1, i]);
  };

  Polygon.prototype.self_intersects = function() {
    var i, max, _i;
    max = this.open ? this.points.length - 1 : this.points.length;
    for (i = _i = 0; 0 <= max ? _i < max : _i > max; i = 0 <= max ? ++_i : --_i) {
      if (this.self_intersects_at_index(i)) {
        return true;
      }
    }
    return false;
  };

  Polygon.prototype.partially_intersects_poly = function(poly) {
    var i, max, n, v1, v2, _i;
    if (!this.aabb.intersects_bbox(poly.aabb)) {
      return false;
    }
    n = this.points.length;
    if (n < 2) {
      return false;
    }
    max = this.open ? n - 1 : n;
    for (i = _i = 0; 0 <= max ? _i < max : _i > max; i = 0 <= max ? ++_i : --_i) {
      v1 = this.points[i];
      v2 = this.points[(i + 1) % n];
      if (poly.intersects_segment(v1, v2)) {
        return true;
      }
    }
    return false;
  };

  Polygon.prototype.contains_poly = function(poly) {
    var p, _i, _len, _ref;
    if (!this.aabb.contains_bbox(poly.aabb)) {
      return false;
    }
    _ref = poly.points;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      if (!this.contains_pt(p)) {
        return false;
      }
    }
    return true;
  };

  Polygon.prototype.intersects_poly = function(poly) {
    return this.contains_poly(poly) || this.partially_intersects_poly(poly);
  };

  return Polygon;

})();

ComplexPolygon = (function() {

  function ComplexPolygon(vertices, triangles, segments) {
    var p, _i, _len, _ref;
    this.vertices = vertices.splice(0);
    this.triangles = triangles.splice(0);
    this.segments = segments.splice(0);
    this.aabb = new AABB();
    _ref = this.vertices;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      this.aabb.extend_pt(p);
    }
  }

  ComplexPolygon.prototype.centroid = function() {
    var a, m, sum_a, sum_x, sum_y, t, _i, _len, _ref;
    sum_x = 0;
    sum_y = 0;
    sum_a = 0;
    _ref = this.triangles_points();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      t = _ref[_i];
      m = mean_pt(t);
      a = tri_area(t[0], t[1], t[2]);
      sum_x += m.x * a;
      sum_y += m.y * a;
      sum_a += a;
    }
    return {
      x: sum_x / sum_a,
      y: sum_y / sum_a
    };
  };

  ComplexPolygon.prototype.get_aabb = function() {
    return this.aabb.clone();
  };

  ComplexPolygon.prototype.aabb_midpoint = function() {
    return this.aabb.midpoint();
  };

  ComplexPolygon.prototype.contains_pt = function(p) {
    var t, _i, _len, _ref;
    if (!this.aabb.contains_pt(p)) {
      return false;
    }
    _ref = this.triangles_points();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      t = _ref[_i];
      if (pt_in_tri(t[0], t[1], t[2], p)) {
        return true;
      }
    }
    return false;
  };

  ComplexPolygon.prototype.labelpos = function() {
    var best_d2, best_m, centroid, d2, m, t, _i, _len, _ref;
    centroid = this.centroid();
    if (this.contains_pt(centroid)) {
      best_m = centroid;
      best_d2 = this.dist2_to_edge(centroid);
    } else {
      best_d2 = NINF;
    }
    _ref = this.triangles_points();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      t = _ref[_i];
      m = mean_pt(t);
      d2 = this.dist2_to_edge(m);
      if (d2 > best_d2) {
        best_d2 = d2;
        best_m = m;
      }
    }
    return best_m;
  };

  ComplexPolygon.prototype.dist2_to_edge = function(p) {
    var min_d2, s, v0, v1, _i, _len, _ref;
    min_d2 = Number.POSITIVE_INFINITY;
    _ref = this.segments;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      s = _ref[_i];
      v0 = this.vertices[s[0]];
      v1 = this.vertices[s[1]];
      min_d2 = Math.min(min_d2, seg_pt_dist2(v0.x, v0.y, v1.x, v1.y, p.x, p.y));
    }
    return min_d2;
  };

  ComplexPolygon.prototype.segments_points = function() {
    var s, _i, _len, _ref, _results;
    _ref = this.segments;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      s = _ref[_i];
      _results.push([this.vertices[s[0]], this.vertices[s[1]]]);
    }
    return _results;
  };

  ComplexPolygon.prototype.triangles_points = function() {
    var t, _i, _len, _ref, _results;
    _ref = this.triangles;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      t = _ref[_i];
      _results.push([this.vertices[t[0]], this.vertices[t[1]], this.vertices[t[2]]]);
    }
    return _results;
  };

  return ComplexPolygon;

})();

Perspective = (function() {

  function Perspective(args) {
    if (args.focal != null) {
      this.f = args.focal;
    } else if ((args.width != null) && (args.fov != null)) {
      this.f = args.width / (2 * Math.tan(args.fov / 2));
    } else {
      console.log(args);
      throw {
        name: "error: bad arguments",
        args: args
      };
    }
  }

  Perspective.prototype.project = function(p) {
    return {
      x: this.f * p.x / p.z,
      y: this.f * p.y / p.z
    };
  };

  Perspective.prototype.unproject = function(p, z) {
    if (z == null) {
      z = p.z;
    }
    return {
      x: p.x * p.z / this.f,
      y: p.y * p.z / this.f,
      z: z
    };
  };

  return Perspective;

})();

segments_intersect = function(A, B, C, D) {
  return ccw(A, C, D) !== ccw(B, C, D) && ccw(A, B, C) !== ccw(A, B, D);
};

ccw = function(A, B, C) {
  return (C.y - A.y) * (B.x - A.x) > (B.y - A.y) * (C.x - A.x);
};

seg_pt_dist2 = function(x1, y1, x2, y2, px, py) {
  var pd2, u, x, y;
  pd2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);
  if (pd2 === 0) {
    x = x1;
    y = y2;
  } else {
    u = ((px - x1) * (x2 - x1) + (py - y1) * (y2 - y1)) / pd2;
    if (u < 0) {
      x = x1;
      y = y1;
    } else if (u > 1.0) {
      x = x2;
      y = y2;
    } else {
      x = x1 + u * (x2 - x1);
      y = y1 + u * (y2 - y1);
    }
  }
  return (x - px) * (x - px) + (y - py) * (y - py);
};

clone_pt = function(o) {
  if (o != null) {
    if (o.z != null) {
      return {
        x: o.x,
        y: o.y,
        z: o.z
      };
    } else {
      return {
        x: o.x,
        y: o.y
      };
    }
  } else {
    return null;
  }
};

dist_pt = function(p, q) {
  var dx, dy;
  dx = p.x - q.x;
  dy = p.y - q.y;
  return Math.sqrt(dx * dx + dy * dy);
};

sub_pt = function(p, q) {
  return {
    x: p.x - q.x,
    y: p.y - q.y
  };
};

mean_pt = function(points) {
  var p, x, y, _i, _len;
  x = 0;
  y = 0;
  for (_i = 0, _len = points.length; _i < _len; _i++) {
    p = points[_i];
    x += p.x;
    y += p.y;
  }
  return {
    x: x / points.length,
    y: y / points.length
  };
};

tri_area = function(a, b, c) {
  return 0.5 * Math.abs(a.x * (b.y - c.y) + b.x * (c.y - a.y) + c.x * (a.y - b.y));
};

pt_in_tri = function(a, b, c, v) {
  var det, det_v1v2, v0, v1, v2;
  det = function(u, v) {
    return u.x * v.y - u.y * v.x;
  };
  v0 = a;
  v1 = sub_pt(b, a);
  v2 = sub_pt(c, a);
  det_v1v2 = det(v1, v2);
  a = (det(v, v2) - det(v0, v2)) / det_v1v2;
  if (a < 0 || a > 1) {
    return false;
  }
  b = -(det(v, v1) - det(v0, v1)) / det_v1v2;
  return b >= 0 && a + b <= 1;
};

mod = function(x, n) {
  return ((x % n) + n) % n;
};

window.show_modal_areyousure = function(args) {
  if (args.label != null) {
    $("#modal-areyousure-label").html(args.label);
  }
  if (args.message != null) {
    $("#modal-areyousure-message").html(args.message);
  }
  if (args.yes_text != null) {
    $("#modal-areyousure-yes").text(args.yes_text);
  }
  if (args.no_text != null) {
    $("#modal-areyousure-no").text(args.no_text);
  }
  if (args.yes != null) {
    $("#modal-areyousure-yes").off("click").on("click", args.yes);
  }
  if (args.no != null) {
    $("#modal-areyousure-no").off("click").on("click", args.no);
  }
  if (typeof args.before_show === "function") {
    args.before_show();
  }
  return $("#modal-areyousure").modal("show");
};

window.show_modal_error = function(message, header) {
  $("#modal-error-label").html(header != null ? header : "Error!");
  $("#modal-error-message").html(message);
  return $("#modal-error").modal("show");
};

window.hide_modal_error = function() {
  return $("#modal-error").modal("hide");
};

window.show_modal_form = function(args) {
  if (args.label != null) {
    $("#modal-form-label").html(args.label);
  }
  if (args.body != null) {
    $("#modal-form-body").html(args.body);
  }
  if (args.yes_text != null) {
    $("#modal-form-yes").text(args.yes_text);
  }
  if (args.no_text != null) {
    $("#modal-form-no").text(args.no_text);
  }
  if (args.yes != null) {
    $("#modal-form-yes").off("click").on("click", args.yes);
  }
  if (args.no != null) {
    $("#modal-form-no").off("click").on("click", args.no);
  }
  if (typeof args.before_show === "function") {
    args.before_show();
  }
  $("#modal-form").off("shown").on("shown", function() {
    return $("#modal-form-body").find("input").filter(function() {
      return $(this).val() === "";
    }).first().focus();
  });
  return $("#modal-form").modal("show");
};

window.hide_modal_form = function() {
  return $("#modal-form").modal("hide");
};

window.show_modal_give_up = function(label_message, prompt_message, submit_message, suggested_reasons) {
  var r, reasons, str, _i, _len;
  $("#modal-give-up-text").val("");
  $("#modal-give-up-label").text(label_message);
  $("#modal-give-up-prompt").text(prompt_message);
  $("#modal-give-up-submit").text(submit_message);
  $("#modal-give-up-submit").attr("disabled", "disabled");
  reasons = $("#modal-give-up-suggested-reasons");
  reasons.empty();
  if (suggested_reasons != null) {
    for (_i = 0, _len = suggested_reasons.length; _i < _len; _i++) {
      str = suggested_reasons[_i];
      r = $("<button class='btn btn-block' type='button'>" + str + "</button>");
      r.on("click", function() {
        $("#modal-give-up-text").val(str);
        return $("#modal-give-up-submit").removeAttr("disabled");
      });
      reasons.append(r);
    }
    reasons.append($("<p style='margin-top:20px;'>Other problem:</p>"));
  }
  return $("#modal-give-up").modal("show");
};

window.hide_modal_give_up = function() {
  return $("#modal-give-up").modal("hide");
};

$(function() {
  return $("#modal-give-up-text").on("input propertychange", function() {
    var text;
    text = $("#modal-give-up-text").val();
    if (text && text.length > 10) {
      return $("#modal-give-up-submit").removeAttr("disabled");
    } else {
      return $("#modal-give-up-submit").attr("disabled", "disabled");
    }
  });
});

window.show_modal_loading = function(message, timeout) {
  var modal_loading_timeout;
  if (message == null) {
    message = "Loading...";
  }
  if (timeout == null) {
    timeout = 1000;
  }
  return modal_loading_timeout = setTimeout((function() {
    $("#modal-loading-label").text(message);
    return $("#modal-loading").modal({
      backdrop: "static",
      keyboard: false
    }).modal("show");
  }), timeout);
};

window.hide_modal_loading = function(on_hide) {
  var $modal;
  if (typeof modal_loading_timeout !== "undefined" && modal_loading_timeout !== null) {
    clearTimeout(modal_loading_timeout);
  }
  $modal = $("#modal-loading");
  $modal.modal("hide");
  if (on_hide != null) {
    return $modal.off("hidden").on("hidden", on_hide);
  }
};

$(document).on('mouseover', '.hover-toggle', function() {
  var h, out, over, w;
  out = $(this).find('.show-on-mouseout');
  over = $(this).find('.show-on-mouseover');
  w = out.width();
  h = out.height();
  out.hide();
  over.width(w);
  over.height(h);
  return over.show();
});

$(document).on('mouseout', '.hover-toggle', function() {
  $(this).find('.show-on-mouseout').show();
  return $(this).find('.show-on-mouseover').hide();
});

(function() {
  var handle_nav;
  handle_nav = function(id) {
    return $("div#" + id).on('click', 'li > a', function() {
      var timer,
        _this = this;
      $('.loading-spinner').remove();
      $("div#" + id + " li.active").removeClass('active');
      $(this).closest('li').addClass('active');
      $(this).append(' <i class="icon-spinner icon-spin loading-spinner"></i>');
      timer = setTimeout((function() {
        return $('div#content').html('<i class="icon-spinner icon-spin icon-2x"></i>');
      }), 1000);
      return window.on('beforeunload', function() {
        clearTimeout(timer);
        return null;
      });
    });
  };
  handle_nav('subnav');
  return handle_nav('sidenav');
})();

ActiveTimer = (function() {

  function ActiveTimer() {
    var _this = this;
    this.started = false;
    this.total_start = null;
    this.active_start = null;
    this.partial_time_ms = 0;
    $(window).on('focus', function() {
      if (_this.started) {
        return _this.active_start = Date.now();
      }
    });
    $(window).on('blur', function() {
      if (_this.started && (_this.active_start != null)) {
        _this.partial_time_ms += Date.now() - _this.active_start;
      }
      return _this.active_start = null;
    });
  }

  ActiveTimer.prototype.start = function() {
    this.total_start = Date.now();
    this.active_start = Date.now();
    this.partial_time_ms = 0;
    return this.started = true;
  };

  ActiveTimer.prototype.ensure_started = function() {
    if (!this.started) {
      return this.start();
    }
  };

  ActiveTimer.prototype.time_ms = function() {
    if (this.started) {
      return Date.now() - this.total_start;
    } else {
      return 0;
    }
  };

  ActiveTimer.prototype.time_active_ms = function() {
    if (this.started) {
      if (this.active_start != null) {
        return this.partial_time_ms + (Date.now() - this.active_start);
      } else {
        return this.partial_time_ms;
      }
    } else {
      return 0;
    }
  };

  return ActiveTimer;

})();

UndoRedo = (function() {

  function UndoRedo(ui, args) {
    var _this = this;
    this.ui = ui;
    this.redo = function() {
      return UndoRedo.prototype.redo.apply(_this, arguments);
    };
    this.undo = function() {
      return UndoRedo.prototype.undo.apply(_this, arguments);
    };
    this.btn_undo = args.btn_undo != null ? args.btn_undo : '#btn-undo';
    this.btn_redo = args.btn_redo != null ? args.btn_redo : '#btn-redo';
    this.undo_stack = [];
    this.redo_stack = [];
    if (this.btn_undo != null) {
      $(this.btn_undo).on('click', function() {
        return _this.undo();
      });
    }
    if (this.btn_redo != null) {
      $(this.btn_redo).on('click', function() {
        return _this.redo();
      });
    }
    $(document).bind('keydown.ctrl_z', function() {
      return _this.undo();
    });
    $(document).bind('keydown.meta_z', function() {
      return _this.undo();
    });
    $(document).bind('keydown.ctrl_y', function() {
      return _this.redo();
    });
    $(document).bind('keydown.meta_y', function() {
      return _this.redo();
    });
  }

  UndoRedo.prototype.run = function(e) {
    if (e != null) {
      console.log('run:');
      console.log(e);
      e.run(this.ui);
      this.undo_stack.push(e);
      this.redo_stack = [];
      this.ui.s.log.action(e.entry());
      return this.update_buttons();
    }
  };

  UndoRedo.prototype.undo = function() {
    var e;
    if (this.can_undo()) {
      e = this.undo_stack.pop();
      console.log('undo:');
      console.log(e);
      e.undo(this.ui);
      this.redo_stack.push(e);
      this.ui.s.log.action({
        name: 'UndoRedo.undo',
        event: e
      });
      return this.update_buttons();
    } else {
      return this.ui.s.log.attempted({
        name: 'UndoRedo.undo'
      });
    }
  };

  UndoRedo.prototype.redo = function() {
    var e;
    if (this.can_redo()) {
      e = this.redo_stack.pop();
      console.log('redo:');
      console.log(e);
      e.redo(this.ui);
      this.undo_stack.push(e);
      this.ui.s.log.action({
        name: 'UndoRedo.redo',
        event: e
      });
      return this.update_buttons();
    } else {
      return this.ui.s.log.attempted({
        name: 'UndoRedo.redo'
      });
    }
  };

  UndoRedo.prototype.can_undo = function() {
    return this.undo_stack.length > 0;
  };

  UndoRedo.prototype.can_redo = function() {
    return this.redo_stack.length > 0;
  };

  UndoRedo.prototype.update_buttons = function() {
    this.ui.s.update_buttons();
    if (this.btn_undo != null) {
      set_btn_enabled(this.btn_undo, this.can_undo());
    }
    if (this.btn_redo != null) {
      return set_btn_enabled(this.btn_redo, this.can_redo());
    }
  };

  return UndoRedo;

})();

ActionLog = (function() {

  function ActionLog() {
    var _this = this;
    this.get_submit_data = function() {
      return ActionLog.prototype.get_submit_data.apply(_this, arguments);
    };
    this.attempted = function(args) {
      return ActionLog.prototype.attempted.apply(_this, arguments);
    };
    this.action = function(args) {
      return ActionLog.prototype.action.apply(_this, arguments);
    };
    this.entries = [];
  }

  ActionLog.prototype.action = function(args) {
    var entry;
    entry = $.extend(true, {
      time: new Date(),
      done: true
    }, args);
    this.entries.push(entry);
    console.log('action:');
    return console.log(entry);
  };

  ActionLog.prototype.attempted = function(args) {
    var entry;
    entry = $.extend(true, {
      time: new Date(),
      done: false
    }, args);
    this.entries.push(entry);
    console.log('attempted:');
    return console.log(entry);
  };

  ActionLog.prototype.get_submit_data = function() {
    return JSON.stringify(this.entries);
  };

  return ActionLog;

})();
